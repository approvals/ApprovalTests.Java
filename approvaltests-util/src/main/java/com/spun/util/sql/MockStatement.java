package com.spun.util.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MockStatement implements Statement
{
  public ResultSet executeQuery(String sql)
  {
    return null;
  }

  public int executeUpdate(String sql)
  {
    return 0;
  }

  public void close()
  {
  }

  public int getMaxFieldSize()
  {
    return 0;
  }

  public void setMaxFieldSize(int max)
  {
  }

  public int getMaxRows()
  {
    return 0;
  }

  public void setMaxRows(int max)
  {
  }

  public void setEscapeProcessing(boolean enable)
  {
  }

  public int getQueryTimeout()
  {
    return 0;
  }

  public void setQueryTimeout(int seconds)
  {
  }

  public void cancel()
  {
  }

  public SQLWarning getWarnings()
  {
    return null;
  }

  public void clearWarnings()
  {
  }

  public void setCursorName(String name)
  {
  }

  public boolean execute(String sql)
  {
    return false;
  }

  public ResultSet getResultSet()
  {
    return null;
  }

  public int getUpdateCount()
  {
    return 0;
  }

  public boolean getMoreResults()
  {
    return false;
  }

  public void setFetchDirection(int direction)
  {
  }

  public int getFetchDirection()
  {
    return 0;
  }

  public void setFetchSize(int rows)
  {
  }

  public int getFetchSize()
  {
    return 0;
  }

  public int getResultSetConcurrency()
  {
    return 0;
  }

  public int getResultSetType()
  {
    return 0;
  }

  public void addBatch(String sql)
  {
  }

  public void clearBatch()
  {
  }

  public int[] executeBatch()
  {
    return null;
  }

  public Connection getConnection()
  {
    return new MockConnection();
  }

  public boolean getMoreResults(int current)
  {
    return false;
  }

  public ResultSet getGeneratedKeys()
  {
    return null;
  }

  public int executeUpdate(String sql, int autoGeneratedKeys)
  {
    return 0;
  }

  public int executeUpdate(String sql, int[] columnIndexes)
  {
    return 0;
  }

  public int executeUpdate(String sql, String[] columnNames)
  {
    return 0;
  }

  public boolean execute(String sql, int autoGeneratedKeys)
  {
    return false;
  }

  public boolean execute(String sql, int[] columnIndexes)
  {
    return false;
  }

  public boolean execute(String sql, String[] columnNames)
  {
    return false;
  }

  public int getResultSetHoldability()
  {
    return 0;
  }

  public boolean isClosed()
  {
    return false;
  }

  public boolean isPoolable()
  {
    return false;
  }

  public void setPoolable(boolean arg0)
  {
  }

  public boolean isWrapperFor(Class<?> arg0)
  {
    return false;
  }

  public <T> T unwrap(Class<T> arg0)
  {
    return null;
  }

  public void closeOnCompletion()
  {
  }

  public boolean isCloseOnCompletion()
  {
    return false;
  }
}
